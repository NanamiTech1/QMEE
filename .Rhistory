knitr::opts_chunk$set(echo = TRUE)
options(digits  = 3)
# install.packages("car")
# install.packages("geomorph")
library(car)
source("./MLM_Dworkin.R")
ls()
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
summary(dll_data)
str(dll_data)
dim(dll_data)
head(dll_data)
dll_data <- na.omit(dll_data)
dim(dll_data)
dll_data$genotype <- relevel(dll_data$genotype, "wt")
levels(dll_data$genotype)
dll_data$temp <- as.factor(dll_data$temp)
cov(dll_data[ ,5:8])
cor(dll_data[, 5:8])
scatterplotMatrix( ~ femur + tibia + tarsus + SCT | interaction(genotype, temp),
ellipse = TRUE, data = dll_data, gap = 0,
plot.points = F)
eig_vals <- svd(cov(dll_data[, 5:8]))$d
det(cov(dll_data[, 5:8]))
prod(eig_vals)
sum(eig_vals)
sum(diag(cov(dll_data[, 5:8])))
dll_data$femur_s <- scale(dll_data$femur)
dll_data$tibia_s <- scale(dll_data$tibia)
dll_data$tarsus_s <- scale(dll_data$tarsus)
dll_data$SCT_s <- scale(dll_data$SCT)
apply(dll_data[,9:12], 2, sd)
apply(dll_data[,9:12], 2, mean)  ## very small ~ 0
round(apply(dll_data[,9:12], 2, mean))  ## very small ~ 0
cov(dll_data[,9:12])
cor(dll_data[,9:12])
summary(manova(mlm_fit1),
test = "Wilks")
mlm_fit1 <- lm(as.matrix(dll_data[,9:12]) ~ genotype, data = dll_data)
class(mlm_fit1)
summary(mlm_fit1)
summary(manova(mlm_fit1))
summary(manova(mlm_fit1),
test = "Wilks")
coef(mlm_fit1)
# Length/magnitude (L2 norm) of the vector
sqrt(t(coef(mlm_fit1)[2,]) %*% coef(mlm_fit1)[2,])
# or equivalently
sqrt(sum(coef(mlm_fit1)[2,]^2))
# Length/magnitude (L2 norm) of the vector
sqrt(t(coef(mlm_fit1)[2,]) %*% coef(mlm_fit1)[2,])
# or equivalently
sqrt(sum(coef(mlm_fit1)[2,]^2))
PD(coef(mlm_fit1)[2,])
sum(diag(cov(dll_data[,9:12])))
sum(diag(cov(mlm_fit1$fitted)))
sum(diag(cov(mlm_fit1$fitted)))/sum(diag(cov(dll_data[,9:12])))
sum(diag(cov(mlm_fit1$fitted)))/sum(diag(cov(dll_data[,9:12])))
shapeRsq(mlm_fit1)
mlm_fit2 <- procD.lm(f1 = dll_data[, 9:12] ~ genotype, data = dll_data, iter = 2000 )
library(geomorph)
mlm_fit2 <- procD.lm(f1 = dll_data[, 9:12] ~ genotype,
data = dll_data, iter = 2000 )
summary(mlm_fit2)
coef(mlm_fit2)
mlm_fit4 <- lm(as.matrix(dll_data[,9:12]) ~ temp + genotype, data = dll_data)
mlm_fit5 <- lm(as.matrix(dll_data[,9:12]) ~ temp*genotype, data = dll_data)
Anova(mlm_fit5)
mlm_fit4_dist <- procD.lm(dll_data[,9:12] ~ genotype*temp,
data = dll_data, iter = 2000)
summary(mlm_fit4_dist)
PD(coef(mlm_fit5)[2,])
PD(coef(mlm_fit5)[3,])
PD(coef(mlm_fit5)[4,])
shapeRsq(mlm_fit4)
shapePRsq(mlm_fit4)
shapePRsq(mlm_fit5)
shapeRsq(mlm_fit4)
shapePRsq(mlm_fit4)
data_url <- "http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv"
if (!file.exists("dll.csv")) {
download.file(data_url,dest="dll.csv")
}
dll_data <- read.csv("dll.csv")
## make temp a factor (25 vs 30 degrees)
dll_data$temp <- factor(dll_data$temp)
## scale relevant variables (fancier but less repetition than previously)
morph_vars <- c("femur","tibia","tarsus","SCT")
morph_vars_sc <- paste(morph_vars,"s",sep="_")
dll_data2 <- dll_data
## c() drops unwanted structure from the results of scale()
for (i in 1:length(morph_vars)) {
dll_data2[[morph_vars_sc[i]]] <- c(scale(dll_data[[morph_vars[i]]]))
}
dll_melt <- (dll_data2
%>% select(-c(femur,tibia,tarsus,SCT))  ## drop unscaled vars
%>% mutate(units=factor(1:n()))
%>% gather(trait,value, -c(units,replicate,line,genotype,temp))
%>% drop_na()
)
library(MCMCglmm)
library(lme4)
library(brms)
library(tidyr)
library(dplyr)
library(corrplot)
library(broom.mixed)
library(dotwhisker)
library(ggplot2); theme_set(theme_bw())
dll_melt <- (dll_data2
%>% select(-c(femur,tibia,tarsus,SCT))  ## drop unscaled vars
%>% mutate(units=factor(1:n()))
%>% gather(trait,value, -c(units,replicate,line,genotype,temp))
%>% drop_na()
)
install.packages("dotwhisker")
library(dotwhisker)
head(dll_melt)
head(dll_data) # original wide
head(dll_data) # original wide
head(dll_melt)
t1 <- system.time(
lmer1 <- lmer(value ~ trait:(genotype*temp) - 1 +
(trait-1|line) + (trait-1|units),
data=dll_melt,
control=lmerControl(optCtrl=list(ftol_abs=1e-8),
check.nobs.vs.nlev="ignore",
check.nobs.vs.nRE="ignore"))
)
all(abs(getME(lmer1,"theta"))>1e-4) ## check for singularity (OK in this case)
VarCorr(lmer1)
par(mfrow=c(1,2))
vv1 <- VarCorr(lmer1)
## fix unit variance-covariance by adding residual variance:
diag(vv1$units) <- diag(vv1$units)+sigma(lmer1)^2
corrplot.mixed(cov2cor(vv1$line),upper="ellipse")
corrplot.mixed(cov2cor(vv1$units),upper="ellipse")
cc1 <- tidy(lmer1,effect="fixed") %>%
tidyr::separate(term,into=c("trait","fixeff"),extra="merge",
remove=FALSE)
dwplot(cc1)+facet_wrap(~fixeff,scale="free",ncol=2)+
geom_vline(xintercept=0,lty=2)
cc2 <- tidy(lmer1,effect="ran_pars",conf.int=TRUE,conf.method="profile")
tidy(lmer1,
effect = "ran_pars",
conf.int = TRUE, conf.method = "profile")
?MCMCglmm
prior.model.1 <- list( R = list(V=diag(4)/4, nu=0.004),
G = list(G1=list(V=diag(4)/4, nu=0.004)))
prior.model.1
##,depends.on=c("prior","mod_fm","get_data")}
t2 <- system.time(
MMLM1.fit <- MCMCglmm(fmla.MMLM1,
random=~ us(trait):line,
rcov=~ us(trait):units,
prior=  prior.model.1,
data= dll_data2,
family = fam.test,
nitt= 10000, burnin= 2000, thin=10)
)
fmla.MMLM1  <- cbind(femur_s, tibia_s, tarsus_s, SCT_s) ~
trait:(genotype*temp) - 1
fam.test <- rep("gaussian", 4 )
prior.model.1 <- list( R = list(V=diag(4)/4, nu=0.004),
G = list(G1=list(V=diag(4)/4, nu=0.004)))
##,depends.on=c("prior","mod_fm","get_data")}
t2 <- system.time(
MMLM1.fit <- MCMCglmm(fmla.MMLM1,
random=~ us(trait):line,
rcov=~ us(trait):units,
prior=  prior.model.1,
data= dll_data2,
family = fam.test,
nitt= 10000, burnin= 2000, thin=10)
)
r round(t2["elapsed"])
round(t2["elapsed"])
library(lattice)
xyplot(MMLM1.fit$Sol[,1:4])
xyplot(MMLM1.fit$Sol[,13:16])
acf(MMLM1.fit$Sol[,1:2])
xyplot(MMLM1.fit$VCV[,1:4])
acf(MMLM1.fit$VCV[,1:3])
summary(MMLM1.fit)
summary(MMLM1.fit$Sol)
##' extract variance-covariance matrices for MCMCglmm objects
##' does not (yet) set cor, stddev, residual-var attributes
##' may be fragile: depends on group vars not having dots in them?
VarCorr.MCMCglmm <- function(object, ...) {
s <- summary(object$VCV)$statistics[,"Mean"]
grps <- gsub("^[^.]+\\.([[:alnum:]]+)$","\\1",names(s))
ss <- split(s,grps)
getVC <- function(x) {
nms <- gsub("^([^.]+)\\.[[:alnum:]]+$","\\1",names(x))
n <- length(nms)
L <- round(sqrt(n))
dimnms <- gsub("^([^:]+):.*$","\\1",nms[1:L])
return(matrix(x,dimnames=list(dimnms,dimnms),
nrow=L))
}
r <- setNames(lapply(ss,getVC),unique(grps))
return(r)
}
vv <- VarCorr(MMLM1.fit)
vv
par(mfrow=c(1,2))
corrplot.mixed(cov2cor(vv$line),upper="ellipse")
corrplot.mixed(cov2cor(vv$units),upper="ellipse")
tt <- tidy(MMLM1.fit)
tt2 <- tidy(lmer1)
tt_comb <- bind_rows(lmer=tt,MCMCglmm=tt2,.id="model") %>%
filter(effect=="fixed")
dwplot(tt_comb)+geom_vline(xintercept=0,lty=2)
